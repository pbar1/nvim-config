version: '3'

vars:
  BIN: '{{osBase .PWD}}'
  IMAGE: ghcr.io/pbar1/{{.BIN}}
  VERSION:
    sh: git describe --tags --always --dirty

tasks:
  default: task --list

  # TODO: Under the current codebase, the built Vim package Nix derivation does
  #       not seem to get updated unless a garbage collection happens. Also,
  #       having Vim runtime dirs (ie, our fake XDG dirs) screws with the
  #       config. We clear everything, but there's a catch: doing this too many
  #       times will cause GitHub to throttle us, even with token
  #       authentication (though so far, only "public access" tokens have been
  #       tried).
  clean:
    desc: Remove generated files and container images.
    cmds:
    - rm -rf run/ plugin/ || true
    - sudo rm -rf result
    - nix-collect-garbage --delete-old

  build:
    desc: Builds a wrapped Neovim instance using Nix.
    cmds:
    - nix build

  nix:link:
    cmds:
    - mkdir -p run/nix/data run/nix/cache
    status:
    - ls run/nix/data run/nix/cache

  nix:run:
    desc: Launches an instance of Neovim using this config via Nix.
    deps:
    - link
    - build
    - clean # TODO: It would be nice not to have to clean build every time
    cmds:
    - XDG_CONFIG_HOME=run/nix/does_not_exist XDG_DATA_HOME=run/nix/data XDG_CACHE_HOME=run/nix/cache ./result/bin/nvim {{.CLI_ARGS}}

  packer:link:
    cmds:
    - mkdir -p run/packer/config/nvim run/packer/data run/packer/cache
    - rm -rf run/packer/config/nvim/init.lua run/packer/config/nvim/lua || true
    - cp init.lua run/packer/config/nvim/init.lua
    - cp -r lua run/packer/config/nvim/lua

  packer:run:
    desc: Launches an instance of Neovim using this config directly.
    deps:
    - packer:link
    - packer:gen
    cmds:
    - |
      nvim_bin="$(fd '.*-neovim-unwrapped-master$' /nix/store | sort -u | head -n 1)/bin/nvim"
      export XDG_CONFIG_HOME=run/packer/config \
             XDG_DATA_HOME=run/packer/data     \
             XDG_CACHE_HOME=run/packer/cache
      "${nvim_bin}" {{.CLI_ARGS}}

  shell:
    desc: Launches a Nix shell with development dependencies for this project.
    cmds:
    - nix develop

  version:
    desc: Print version string that will be used
    cmds:
    - echo {{.VERSION}}

  image:
    desc: Alias for "image:build"
    deps:
    - image:build

  image:name:
    desc: Print container image name that will be used
    cmds:
    - echo {{.IMAGE}}:{{.VERSION}}

  # TODO: Tag the container image during the Nix build, rather than "latest"
  # FIXME: It currently only builds properly on x86_64-linux
  image:build:
    desc: Build container image
    cmds:
    - nix build ".#containerImage" .
    - docker load < result
    - docker tag ghcr.io/pbar1/nvim-config:latest {{.IMAGE}}:{{.VERSION}}

  image:push:
    desc: Push container image to remote repository
    deps:
    - image:build
    cmds:
    - docker push {{.IMAGE}}:{{.VERSION}}
    - docker push {{.IMAGE}}:latest

  findpack:
    silent: true
    desc: Finds init.vim in Nix store.
    cmds:
    - |
      init_vim="$(rg --only-matching --no-line-number --no-filename --replace '${1}' '\-u (/nix/store/.*-init.vim)' result)"
      echo "init.vim: ${init_vim}"

      pack_dir="$(rg --only-matching --no-line-number --no-filename '/nix/store/.*-vim-pack-dir' "${init_vim}" | sort -u)"
      echo "packdir: ${pack_dir}"

  packer:gen:
    silent: true
    desc: Generates Lua config for loading Vim plugins via Packer.
    cmds:
    - |
      cat <<'EOF' > lua/config/packer.lua
      -- GENERATED BY "task gen:packer"

      local packer_path = vim.fn.stdpath("data") .. "/site/pack/packer/opt/packer.nvim"
      if vim.fn.empty(vim.fn.glob(packer_path)) > 0 then
         vim.fn.system({ "git", "clone", "--depth", "1", "https://github.com/wbthomason/packer.nvim", packer_path })
      end

      vim.cmd("packadd packer.nvim")

      local packer = require("packer")
      packer.init({
         profile = {
           enable = true,
           threshold = 0,
         },
      })
      packer.reset()

      local use = packer.use
      use({ "wbthomason/packer.nvim", opt = true })
      use({ "nvim-telescope/telescope-fzf-native.nvim", run = "make" })
      use({ "nvim-treesitter/nvim-treesitter" })
      EOF

      cat flake.nix \
      | rg --only-matching '[^#]"vim:(.+)" = \{ url = "github:(.+)"' --replace='use({ "${2}" })' \
      | grep -v "telescope-fzf-native" \
      | sed 's|"catppuccin/nvim"|"catppuccin/nvim", as = "catppuccin"|g' \
      >> lua/config/packer.lua
