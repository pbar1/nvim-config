version: '3'

vars:
  BIN: '{{osBase .PWD}}'
  IMAGE: ghcr.io/pbar1/{{.BIN}}
  VERSION:
    sh: git describe --tags --always --dirty

tasks:
  default: task --list

  clean:
    desc: Remove generated files and container images.
    cmds:
    - rm -rf run/ plugin/ || true

  link:
    cmds:
    - mkdir -p run/config run/data run/cache
    status:
    - ls run/config run/data run/cache

  build:
    desc: Builds a wrapped Neovim instance using Nix.
    cmds:
    - nix build

  run:
    desc: Launches an instance of Neovim using this config.
    deps:
    - link
    - build
    cmds:
    - XDG_CONFIG_HOME=run/config XDG_DATA_HOME=run/data XDG_CACHE_HOME=run/cache ./result/bin/nvim {{.CLI_ARGS}}

  version:
    desc: Print version string that will be used
    cmds:
    - echo {{.VERSION}}

  image:
    desc: Alias for "image:build"
    deps:
    - image:build

  image:name:
    desc: Print container image name that will be used
    cmds:
    - echo {{.IMAGE}}:{{.VERSION}}

  # TODO: Implement multiplatform container images with --platform
  image:build:
    desc: Build container image
    cmds:
    - docker build --tag={{.IMAGE}}:{{.VERSION}} .
    status:
    - docker inspect --type=image {{.IMAGE}}:{{.VERSION}}

  image:push:
    desc: Push container image to remote repository
    deps:
    - image:build
    cmds:
    - docker tag {{.IMAGE}}:{{.VERSION}} {{.IMAGE}}:latest
    - docker push {{.IMAGE}}:{{.VERSION}}
    - docker push {{.IMAGE}}:latest

  fmt:
    desc: Formats code in this project.
    cmds:
    - stylua init.lua lua/

  findpack:
    silent: true
    desc: Finds init.vim in Nix store.
    cmds:
    - |
      init_vim="$(rg --only-matching --no-line-number --no-filename --replace '${1}' '\-u (/nix/store/.*-init.vim)' result)"
      echo "init.vim: ${init_vim}"

      pack_dir="$(rg --only-matching --no-line-number --no-filename '/nix/store/.*-vim-pack-dir' "${init_vim}" | sort -u)"
      echo "packdir: ${pack_dir}"

  gen:packer:
    silent: true
    desc: Generates Lua config for loading Vim plugins via Packer.
    cmds:
    - |
      cat <<'EOF' > lua/config/packer.lua
      -- GENERATED BY "task gen:packer"

      local packer_path = vim.fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"
      if vim.fn.empty(vim.fn.glob(packer_path)) > 0 then
         vim.fn.system({ "git", "clone", "--depth", "1", "https://github.com/wbthomason/packer.nvim", packer_path })
      end

      local packer = require("packer")
      packer.init({
         profile = {
           enable = true,
           threshold = 0,
         },
      })
      packer.reset()

      local use = packer.use
      use({ "wbthomason/packer.nvim" })
      EOF

      cat flake.nix \
      | rg --only-matching '[^#]"vim:(.+)" = \{ url = "github:(.+)"' --replace='use({ "${2}" })' \
      | sed 's|"catppuccin/nvim"|"catppuccin/nvim", as = "catppuccin"|g' \
      >> lua/config/packer.lua
